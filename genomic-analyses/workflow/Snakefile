import os
import glob
import pandas as pd
from pathlib import Path
from tqdm import tqdm
from snakemake.utils import min_version

###############
#### SETUP ####
###############

# Require at least this version
min_version('5.26.1')

# Defailt configfile. Can be changed at command-line (--configfile)
configfile: '../config/hpcnode.yaml'

# Sample and chromosome info
SAMPLES = pd.read_table(config['samples'], sep='\t')['sample'].tolist()
TOR_SAMPLES = [x for x in SAMPLES if x.startswith('s_')]
CITIES = pd.read_table(config['samples'], sep = '\t')['city'].unique().tolist()
HABITATS = pd.read_table(config['samples'], sep = '\t')['site'].unique().tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()

# Reference genome and annotation
REFERENCE_GENOME = ancient(config['files']['reference_genome'])
GFF_FILE = ancient(config['files']['gff'])

# Paths for output files
TMPDIR = config['temp_dir']
RAW_READ_DIR = '{0}'.format(config['raw_read_prefix'])
TRIMMED_READ_DIR = '{0}/trimmed_reads'.format(config['raw_read_prefix'])
QC_DIR = '{0}/qc'.format(config['results_prefix'])
SPECIES_ID_DIR = '{0}/species_id'.format(config['results_prefix'])
BAM_DIR = '{0}/bam'.format(config['results_prefix'])
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
SS_SFS_DIR = '{0}/single_sample_sfs'.format(config['results_prefix'])
FIGURES_DIR = '{0}/figures'.format(config['results_prefix'])

## Fixed parameters

# Sets number of tasks for processes to be split across nodes during cluster execution
# (e.g. estimation of SAF files and GLs)
CORES_PER_NODE = config['cluster']['cores_per_node']

# Extensions and number of files for NCBI nucleotide database download for BLASTing matK and rbcL
NT_DB_FILE = ['%02d' % x for x in range(0, config['species_id']['num_nt_db_files'])]
NT_DB_FILE_EXT = ['nhd', 'nhi', 'nhr', 'nhn', 'nnd', 'nni', 'nog', 'nsq', 'tar.gz.md5']
NT_DB_FINAL_EXT = ['nal', 'ndb', 'nos', 'not', 'ntf', 'nto']

# Parameters for variant calling with ANGSD
ANGSD_MAX_DP = config['angsd']['max_dp']

# Parameters for PI-Fst sample size test = [x for x in range(1, 9, 2)]
# Pretty hacky right now. Might delete this since not really using. 
SS_PI_FST_TEST = [x for x in range(1, 9, 2)]
urban = ['u' + str(x) for x in SS_PI_FST_TEST]
rural = ['r' + str(x) for x in SS_PI_FST_TEST]
JOINT_SFS_WILDCARDS_TOR_TEST = []
for x in urban:
    for y in rural:
        JOINT_SFS_WILDCARDS_TOR_TEST.append(x + '_' + y)
TOR_SAMPLES_PI_FST_TEST = [x for x in TOR_SAMPLES if x.split('_')[1] == '41' or x.split('_')[1] == '83']

# Parameters for NGSadmix
NGSADMIX_K = [x for x in range(2, 11)]
NGSADMIX_SEEDS = [x for x in range(1, 11)]


##################
#### PIPELINE ####
##################

# Only ever consider chromosomes in chromosome file
wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES])

# Rules to be run locally on as single process
localrules: paths_to_raw_reads, create_tmp_dir, create_bam_list_finalSamples_lowCovRemoved, create_samples_to_remove, create_bam_list_highErrorRemoved, create_bam_list_forSpeciesID, angsd_index_degenerate, concat_angsd_stats, concat_sfs, sum_sfs, convert_sites_for_angsd, split_angsd_sites_byChrom, files_for_angsd_site_subset, subset_angsd_gl, subset_angsd_maf, extract_sample_angsd, angsd_done, chloroplast_gene_fasta, index_chloroplast_gene_vcf, concat_fasta, download_nt_database, single_sample_sfs_done, pop_structure_done, clone_degeneracy, downsample_toronto_done, extract_angsd_allSites, angsd_index_allSites, angsd_index_degenerate, angsd_nSites_test_done, create_bam_list_byCity_byHabitat, angsd_fst_readable, angsd_byCity_byHabitat_done, index_toronto_bam, index_bam, urban_rural_toronto_bam_lists, pi_fst_sample_size_test_done, concat_habitat_bamLists_withinCities, convert_freq_forNGSrelate

# Get custom python functions
include: 'rules/common.smk'

# Pipeline targets
# Each step generates an empty flagfile as its final target
rule all:
   input:
        # Trimming, mapping, and QC
        '{0}/multiqc/multiqc_report.html'.format(QC_DIR),
        #'{0}/single_sample_sfs.done'.format(SS_SFS_DIR),
        #'{0}/species_id.done'.format(SPECIES_ID_DIR),
        # Downsample Toronto data
        '{0}/downsample_toronto.done'.format(BAM_DIR),
        # Angsd
        '{0}/angsd.done'.format(ANGSD_DIR),
        '{0}/angsd_byCity_byHabitat.done'.format(ANGSD_DIR),
        # Population structure
        '{0}/population_structure.done'.format(POP_STRUC_DIR)

rule paths_to_raw_reads:
    """
    Writes file with sample name and paths to forward and reverse read FASTQs
    """
    output:
        '{0}/paths_to_raw_reads.txt'.format(PROGRAM_RESOURCE_DIR)
    run:
        with open(output[0], 'w') as fout:
            fout.write('sample\tR1\tR2\n')
            p = Path(RAW_READ_DIR)
            print("Creating text file with path to raw reads")
            for sample in tqdm(SAMPLES):
                reads = [path for path in p.rglob('{0}_*_[1-2].fq.gz'.format(sample))]
                R1 = reads[0].absolute()
                R2 = reads[1].absolute()
                fout.write('{0}\t{1}\t{2}\n'.format(sample, R1, R2)) 

# Create temporary directory used throughout pipeline
rule create_tmp_dir:
    """Create temporary directory for use by pipeline"""
    output: directory(TMPDIR)
    shell: 'mkdir {output}'

# Snakefiles with rules for particular pieces of the pipeline
# See Snakefiles for details
include: 'rules/ref.smk'
include: 'rules/trimming.smk'
include: 'rules/mapping.smk'
include: 'rules/species_id.smk'
include: 'rules/single_sample_sfs.smk'
include: 'rules/qc.smk'
include: 'rules/toronto_downsample.smk'
include: 'rules/angsd_global.smk'
include: 'rules/angsd_byCity_byHabitat.smk'
include: 'rules/population_structure.smk'

# Rule to clean directory of all output files
rule clean:
    """Clean pipeline output files"""
    params:
        'logs {0} {1}/* {2} fastp.json'.format(config['results_prefix'], TRIMMED_READ_DIR, TMPDIR)
    shell:
        'rm -rfv {params}'
