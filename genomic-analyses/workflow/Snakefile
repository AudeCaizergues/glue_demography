import os
import glob
import itertools
import pandas as pd
from pathlib import Path
from snakemake.utils import min_version

###############
#### SETUP ####
###############

# Require at least this version
min_version('6.9.1')

# Defailt configfile. Can be changed at command-line (--configfile)
configfile: '../config/graham.yaml'

# Import rules from QC workflow
# Use specific commit for QC pipeline in case it changes for future projects
module glue_dnaSeqQC:
    snakefile: github("James-S-Santangelo/glue_dnaSeqQC", path="workflow/Snakefile", commit="b32ad85")
    config: config['glue_dnaSeqQC_workflow']

use rule * from glue_dnaSeqQC as glue_dnaSeqQC_*

# Load sample sheet
SAMPLE_SHEET_DF = pd.read_table(config['samples'], sep='\t')

# Sample and chromosome info
SAMPLES = SAMPLE_SHEET_DF['sample'].tolist()
TOR_SAMPLES = [x for x in SAMPLES if x.startswith('s_')]
CITIES = SAMPLE_SHEET_DF['city'].unique().tolist()
HABITATS = SAMPLE_SHEET_DF['site'].unique().tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()
GFF_FILE = ancient(config['gff'])

# Path to results from glue_dnaSeqQC workflow
QC_DIR = '{0}/qc'.format(config['glue_dnaSeqQC_workflow']['results_prefix'])

# Paths for output files
TMPDIR = config['temp_dir']
BAM_DIR = config['bam_path'] 
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
HCN_LOCI_DIR = '{0}/hcn_genotyping'.format(config['results_prefix'])
FIGURES_DIR = '{0}/figures'.format(config['results_prefix'])

## Fixed parameters

# Parameters for variant calling with ANGSD
ANGSD_MAX_DP = config['angsd']['max_dp']

# Parameters for pairwise pi and Fst
BOOT_SEEDS = ['{0}'.format(x) for x in range(1,101)]

##################
#### PIPELINE ####
##################

# Only ever consider chromosomes in chromosome file
wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES]),
    habitat='|'.join([x for x in HABITATS]),
    city='|'.join([x for x in CITIES]),
    sample='|'.join([x for x in SAMPLES]),
    seed='|'.join([x for x in BOOT_SEEDS]),
    maf='0.05',
    gene='li|ac',
    site='0fold|4fold'

# Rules to be run locally on as single process
localrules: create_tmp_dir, index_degenerate_bam, create_samples_to_remove, create_bam_list_finalSamples, convert_sites_for_angsd, angsd_index_allDegenerateSites, select_random_degenerate_sites, angsd_index_random_degen_sites, split_random_angsd_sites_byChrom, index_random_chromosomal_angsd_sites, angsd_index_sites, angsd_allSamples_done, create_bam_list_byCity_byHabitat, select_random_degenerate_sites, angsd_fst_readable, create_random_bam_list_byCity_byHabitat, snps_forAlleleFreqs_byCity_byHabitat, angsd_index_city_snps, angsd_permuted_fst_readable, angsd_byCity_byHabitat_done, angsd_byCity_byHabitat_permuted_done, concat_habitat_bamLists_withinCities, remove_lowCovSamples_forPCA_byCity, angsd_byCity_done, split_angsd_sites_byChrom, index_chromosomal_angsd_sites, angsd_fst_readable_snps_hcn_chroms, hcn_loci_freq_done

# Pipeline targets
# Each step generates an empty flagfile as its final target
rule all:
   input:
        # Degeneracy
        '{0}/degeneracy.done'.format(PROGRAM_RESOURCE_DIR),
        # Angsd
        '{0}/angsd_allSamples.done'.format(ANGSD_DIR),
#         '{0}/angsd_byCity.done'.format(ANGSD_DIR),
#         '{0}/angsd_byCity_byHabitat.done'.format(ANGSD_DIR),
#         '{0}/angsd_byCity_byHabitat_permuted.done'.format(ANGSD_DIR),
#         # Population structure
#         '{0}/population_structure.done'.format(POP_STRUC_DIR),
#         # HCN loci frequencies
#         '{0}/hcn_loci_freq.done'.format(HCN_LOCI_DIR)

# Create temporary directory used throughout pipeline
rule create_tmp_dir:
    """Create temporary directory for use by pipeline"""
    output: directory(TMPDIR)
    shell: 'mkdir {output}'

# Snakefiles with rules for particular pieces of the pipeline
# See Snakefiles for details
include: 'rules/common.smk'
include: 'rules/degeneracy.smk'
include: 'rules/angsd_allSamples.smk'
# include: 'rules/angsd_byCity_byHabitat.smk'
# include: 'rules/angsd_byCity_byHabitat_permute.smk'
# include: 'rules/angsd_byCity.smk'
# include: 'rules/population_structure.smk'
# include: 'rules/hcn_loci_freqs.smk'
