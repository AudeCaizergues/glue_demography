import os
import glob
import itertools
import pandas as pd
from pathlib import Path
from snakemake.utils import min_version

###############
#### SETUP ####
###############

# Require at least this version
min_version('6.9.1')

# Defailt configfile. Can be changed at command-line (--configfile)
configfile: '../config/hpcnode.yaml'

# Load sample sheet
SAMPLE_SHEET_DF = pd.read_table(config['samples'], sep='\t')

# Sample and chromosome info
SAMPLES = SAMPLE_SHEET_DF['sample'].tolist()
TOR_SAMPLES = [x for x in SAMPLES if x.startswith('s_')]
CITIES = SAMPLE_SHEET_DF['city'].unique().tolist()
HABITATS = SAMPLE_SHEET_DF['site'].unique().tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()
GFF_FILE = ancient(config['gff'])

# Paths for output files
LOG_DIR = config['log_prefix']
TMPDIR = config['temp_dir']
REF_DIR = config['ref_dir']
BAM_DIR = config['bam_path'] 
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
NGSLD_DIR = '{0}/ngsld'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
DADI_DIR = '{0}/dadi'.format(config['results_prefix'])
FIGURES_DIR = '{0}/figures'.format(config['results_prefix'])

# Parameters for variant calling with ANGSD
ANGSD_MAX_DP = config['angsd']['max_dp']
ANGSD_MIN_DP_IND_SFS = config['angsd']['min_dp_ind_sfs']
ANGSD_MIN_DP_IND_GL = config['angsd']['min_dp_ind_gl']

### NOT DECIDED IF WE ARE GOING TO FILTER FOR QUALITY YET
## Parameters for initial PCA and relatedness analysis post-QC
#LOWQUAL_SAMPLES_TO_EXCLUDE = config['lowQual_samples_to_exclude']

# List with all samples to exclude based on analysis of within-population relatedness
RELATED_SAMPLES_TO_EXCLUDE = config['related_samples_to_exclude']
FINAL_SAMPLES = [x for x in SAMPLES if x not in RELATED_SAMPLES_TO_EXCLUDE]

# Parameters for Admixture analysis 
NGSADMIX_K = [x for x in range(2, 11)]
NGSADMIX_SEEDS = [x for x in range(1, 11)]

# Parameters for pairwise pi and Fst
BOOT_SEEDS = ['{0}'.format(x) for x in range(1,101)]

# Dadi models
DADI_MODELS = [
    'no_div', 
    'no_div_bot', 
    'no_div_growth', 
    'no_div_bot_growth', 
    'split_no_mig', 
    'split_sym_mig', 
    'split_asym_mig',
    'split_bot_urb_no_mig', 
    'split_bot_urb_sym_mig', 
    'split_bot_urb_asym_mig', 
    'split_bot_rur_no_mig', 
    'split_bot_rur_sym_mig', 
    'split_bot_rur_asym_mig',
    'split_growth_urb_no_mig',
    'split_growth_urb_sym_mig',
    'split_growth_urb_asym_mig',
    'split_growth_rur_no_mig',
    'split_growth_rur_sym_mig',
    'split_growth_rur_asym_mig'
    ] 

##################
#### PIPELINE ####
##################

# Only ever consider chromosomes in chromosome file
wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES]),
    habitat='|'.join([x for x in HABITATS]),
    city='|'.join([x for x in CITIES]),
    sample='|'.join([x for x in SAMPLES]),
    seed='|'.join([x for x in BOOT_SEEDS]),
    seed_admix='|'.join([str(x) for x in NGSADMIX_SEEDS]),
    k='|'.join([str(x) for x in NGSADMIX_K]),
    maf='0.05',
    gene='li|ac',
    site='0fold|4fold'

# Rules to be run locally on as single process
localrules: create_tmp_dir, create_samples_to_remove, create_bam_list_finalSamples, convert_sites_for_angsd, angsd_index_allDegenerateSites, angsd_index_sites, select_random_degenerate_sites, angsd_index_random_degen_sites, split_random_angsd_sites_byChrom, index_random_chromosomal_angsd_sites, angsd_index_sites, angsd_allSamples_done, create_bam_list_byCity_byHabitat, select_random_degenerate_sites, angsd_fst_readable, create_random_bam_list_byCity_byHabitat, angsd_permuted_fst_readable, angsd_byCity_byHabitat_done, angsd_byCity_byHabitat_permuted_done, concat_habitat_bamLists_withinCities, remove_lowCovSamples_forPCA_byCity, angsd_byCity_done, ngsadmix, format_dadi_sfs, dadi_done


# Pipeline targets
# Each step generates an empty flagfile as its final target
rule all:
   input:
        # Degeneracy
        '{0}/degeneracy.done'.format(PROGRAM_RESOURCE_DIR),
        # Angsd
        #'{0}/angsd_allSamples.done'.format(ANGSD_DIR), # removing this part that works on a subset of the 4fold sites
        '{0}/angsd_allSamples_alldegenerates.done'.format(ANGSD_DIR),
        '{0}/angsd_byCity.done'.format(ANGSD_DIR),
        #'{0}/angsd_byCity_byHabitat.done'.format(ANGSD_DIR),
        #'{0}/angsd_byCity_byHabitat_permuted.done'.format(ANGSD_DIR),
        # Population structure
        '{0}/LD_Relatedness.done'.format(POP_STRUC_DIR),
        #'{0}/population_structure.done'.format(POP_STRUC_DIR),
        # Demographic modelling
        #'{0}/dadi.done'.format(DADI_DIR),

# Create temporary directory used throughout pipeline
rule create_tmp_dir:
    """Create temporary directory for use by pipeline"""
    output: directory(TMPDIR)
    shell: 'mkdir {output}'

# Snakefiles with rules for particular pieces of the pipeline
# See Snakefiles for details
include: 'rules/common.smk'
include: 'rules/degeneracy.smk'
#include: 'rules/angsd_allSamples.smk'
include: 'rules/angsd_allSamples_allDegenerates.smk'
#include: 'rules/angsd_byCity_byHabitat.smk'
#include: 'rules/angsd_byCity_byHabitat_permute.smk'
include: 'rules/angsd_byCity.smk'
include: 'rules/LD_Relatedness.smk'
include: 'rules/population_structure.smk'
include: 'rules/dadi_demographic_models.smk'