import os
import glob
import pandas as pd
from snakemake.utils import min_version

min_version('5.26.1')

configfile: '../config/hpcnode.yaml'

# Samples and chromosomes as list
SAMPLES = pd.read_table(config['samples'], sep='\t')['sample'].tolist()
CITIES = pd.read_table(config['samples'], sep = '\t')['city'].unique().tolist()
HABITATS = pd.read_table(config['samples'], sep = '\t')['site'].unique().tolist()
CHROMOSOMES = pd.read_table(config['chromosomes'], header=None).iloc[:,0].tolist()

# Toronto samples to include in analyses
TOR_SAMPLES = pd.read_table(config['toronto_data']['samples'])['sample'].tolist()
TOR_BAMS = config['toronto_data']['bams']

# Reference genome
REFERENCE_GENOME = ancient(config['files']['reference_genome'])
GFF_FILE = ancient(config['files']['gff'])

# Paths for output files
TMPDIR = config['temp_dir']
RAW_READ_DIR = '{0}/raw_data'.format(config['raw_read_prefix'])
TRIMMED_READ_DIR = '{0}/trimmed_reads'.format(config['raw_read_prefix'])
QC_DIR = '{0}/qc'.format(config['results_prefix'])
SPECIES_ID_DIR = '{0}/species_id'.format(config['results_prefix'])
BAM_DIR = '{0}/bam'.format(config['results_prefix'])
PROGRAM_RESOURCE_DIR = '{0}/program_resources'.format(config['results_prefix'])
ANGSD_DIR = '{0}/angsd'.format(config['results_prefix'])
NGSLD_DIR = '{0}/ngsld'.format(config['results_prefix'])
POP_STRUC_DIR = '{0}/population_structure'.format(config['results_prefix'])
SS_SFS_DIR = '{0}/single_sample_sfs'.format(config['results_prefix'])
FIGURES_DIR = '{0}/figures'.format(config['results_prefix'])

# Parameters
CORES_PER_NODE = config['cluster']['cores_per_node']
NT_DB_FILE = ['%02d' % x for x in range(0, config['species_id']['num_nt_db_files'])]
NT_DB_FILE_EXT = ['nhd', 'nhi', 'nhr', 'nhn', 'nnd', 'nni', 'nog', 'nsq', 'tar.gz.md5']
NT_DB_FINAL_EXT = ['nal', 'ndb', 'nos', 'not', 'ntf', 'nto']

# Parameters for variant calling with ANGSD
ANGSD_MAX_DP = config['angsd']['max_dp']

wildcard_constraints:
    chrom='|'.join([x for x in CHROMOSOMES])

localrules: create_tmp_dir, create_bam_list_finalSamples_lowCovRemoved, create_bam_list_highErrorRemoved, create_bam_list_forSpeciesID, concat_angsd_stats, concat_sfs, sum_sfs, convert_sites_for_angsd, split_angsd_sites_byChrom, files_for_angsd_site_subset, subset_angsd_gl, subset_angsd_maf, extract_sample_angsd, angsd_done, chloroplast_gene_fasta, index_chloroplast_gene_vcf, concat_fasta, download_nt_database, single_sample_sfs_done, pop_structure_done, clone_degeneracy, downsample_toronto_done, extract_angsd_allSites, angsd_index_allSites, angsd_index_degenerate, angsd_nSites_test_done, create_bam_list_byCity_byHabitat, angsd_fst_readable, angsd_pairwise_done, urban_rural_toronto_bam_lists, pi_fst_sample_size_test_done

include: 'rules/common.smk'

#raw_read_dict = create_raw_read_dict(RAW_READ_DIR, SAMPLES)

rule all:
   input:
        # Trimming, mapping, and QC
        '{0}/multiqc/multiqc_report.html'.format(QC_DIR),
        '{0}/single_sample_sfs.done'.format(SS_SFS_DIR),
        #'{0}/species_id.done'.format(SPECIES_ID_DIR),
        # Downsample Toronto data
        '{0}/downsample_toronto.done'.format(BAM_DIR),
        # Angsd
        '{0}/angsd.done'.format(ANGSD_DIR),
        '{0}/angsd_pairwise.done'.format(ANGSD_DIR),
        # Population structure
        '{0}/population_structure.done'.format(POP_STRUC_DIR),
        #'{0}/nSites_test/angsd_nSites_test.done'.format(ANGSD_DIR)
        '{0}/pi_fst_sample_size_test/pi_fst_sample_size_test.done'.format(ANGSD_DIR)

rule create_tmp_dir:
    output: directory(TMPDIR)
    shell: 'mkdir {output}'

include: 'rules/ref.smk'
include: 'rules/trimming.smk'
include: 'rules/mapping.smk'
include: 'rules/species_id.smk'
include: 'rules/single_sample_sfs.smk'
include: 'rules/qc.smk'
include: 'rules/toronto_downsample.smk'
include: 'rules/angsd_global.smk'
include: 'rules/population_structure.smk'
include: 'rules/angsd_pairwise_fst_pi.smk'
include: 'rules/angsd_sfs_nSites_test.smk'
include: 'rules/pi_fst_sample_size_test.smk'

rule clean:
    params:
        'logs {0} {1}/* {2} fastp.json'.format(config['results_prefix'], TRIMMED_READ_DIR, TMPDIR)
    shell:
        'rm -rfv {params}'
