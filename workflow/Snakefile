import os
import glob
import pandas as pd
from snakemake.utils import min_version

min_version("5.26.1")

#container: "continuumio/miniconda3:4.9.1"

configfile: "../config/config.yaml"

SAMPLES = pd.read_table(config['samples'])['Sample'].tolist()
RAW_READ_DIR = config['paths']['raw_reads']
TRIMMED_READ_DIR = config['paths']['trimmed_reads']
TMPDIR = config['paths']['temp_dir']

REFERENCE_GENOME = config['files']['reference_genome']

RAW_READ_FASTQC_DIR = '../results/qc/fastqc_raw_reads'
TRIMMED_READ_FASTQC_DIR = '../results/qc/fastqc_trimmed_reads'

def get_raw_reads():
    all_raw_reads = []
    reads = [1, 2]
    for sample in SAMPLES:
        for read in reads:
            read_path = str(glob.glob('{0}/{1}/{1}_*_{2}.fq.gz'.format(RAW_READ_DIR, sample, read))[0])
            all_raw_reads.append(read_path)
    return all_raw_reads

def get_basename(filename):
    basename = os.path.basename(filename).split(os.extsep)[0]
    return basename 

def fastqc_target_files():
    html_files = ['{0}/{1}{2}'.format(RAW_READ_FASTQC_DIR, get_basename(f), '_fastqc.html') for f in get_raw_reads()]
    zip_files = ['{0}/{1}{2}'.format(RAW_READ_FASTQC_DIR, get_basename(f), '_fastqc.zip') for f in get_raw_reads()]
    return html_files + zip_files
    
rule all:
    input:
        fastqc_target_files(),
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR)],
                sample=SAMPLES, ext=['_fastqc.html', '_fastqc.zip']),
        expand('{trimmed_read_dir}/{sample}/{sample}_{read}.fq.gz', trimmed_read_dir=TRIMMED_READ_DIR, sample=SAMPLES, read=['trimmed_1', 'trimmed_2', 'unpaired']),
        expand('../results/fastp_trim_reports/{sample}_fastp.html', sample=SAMPLES),
        expand('../results/bams/unpaired/{sample}_unpaired.bam', sample=SAMPLES)


rule fastqc_raw_reads:
    input:
        get_raw_reads()
    output:
        fastqc_target_files()
    conda: "envs/fastqc.yaml"
    log: "logs/fastqc_raw_reads/fastqc_raw_reads.log"
    threads: 12
    shell:
        "touch {output}"
        #"fastqc --threads {threads} --outdir {0} --noextract --quiet --dir {1} 2> {log}".format(RAW_READ_FASTQC_DIR, TMPDIR)

rule fastqc_trimmed_reads:
    input:
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.fq.gz'.format(TRIMMED_READ_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.fq.gz'.format(TRIMMED_READ_DIR)], 
                sample=SAMPLES)
    output:
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR)],
                sample=SAMPLES, ext=['_fastqc.html', '_fastqc.zip'])
    conda: "envs/fastqc.yaml"
    log: "logs/fastqc_trimmed_reads/fastqc_trimmed_reads.log"
    threads: 12
    shell:
        "touch {output}"
        #"fastqc --threads {threads} --outdir {0} --noextract --quiet --dir {1} 2> {log}".format(TRIMMED_READ_FASTQC_DIR, TMPDIR)

rule fastp_trim:
    input:
        r1 = lambda wc: str(glob.glob('{0}/{1}/{1}_*_1.fq.gz'.format(RAW_READ_DIR, wc.sample))[0]),
        r2 = lambda wc: str(glob.glob('{0}/{1}/{1}_*_2.fq.gz'.format(RAW_READ_DIR, wc.sample))[0])
    output:
        r1_trim = "{0}/{{sample}}/{{sample}}_trimmed_1.fq.gz".format(TRIMMED_READ_DIR),
        r2_trim = "{0}/{{sample}}/{{sample}}_trimmed_2.fq.gz".format(TRIMMED_READ_DIR),
        unp = "{0}/{{sample}}/{{sample}}_unpaired.fq.gz".format(TRIMMED_READ_DIR),
        html = "../results/fastp_trim_reports/{sample}_fastp.html"
    conda: "envs/fastp.yaml"
    log: "logs/fastp_trim/{sample}_fastp.log"  
    shell:
        "touch {output}"
        #"fastp --in1 {input.r1} \
        #    --in2 {input.r2} \
        #    --out1 {output.r1_trim} \
        #    --out2 {output.r2_trim} \
        #    --unpaired1 {output.unp} \
        #    --unpaired2 {output.unp} \
        #    --html {output.html} \
        #    --detect_adapter_pe \
        #    --trim_poly_g \
        #    --overrepresentation_analysis 2> {log}" 

rule bwa_map_unpaired:
    input:
        unp = rules.fastp_trim.output.unp
    output:
        "../results/bams/unpaired/{sample}_unpaired.bam"
    params:
        "-R @RG\tID:${sample}\tCN:NOVOGENE\tPL:ILLUMINA\tPM:NOVASEQ.S4\tSM:${sample}"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/bwa_map_unpaired/{sample}_bwa_map.unpaired.log"
    shell:
        "touch {output}"
        #"bwa mem {0} {{input.unp}} {{params}} |\
        #    samtools view -b |\
        #    samtools sort > {{output}} 2> {{log}}".format(REFERENCE_GENOME)

rule clean:
    params:
        "logs ../results {0}/* {1}/*".format(TRIMMED_READ_DIR, TMPDIR)
    shell:
        "rm -rfv {params}"
