import os
import glob
import pandas as pd
from snakemake.utils import min_version

min_version("5.26.1")

#container: "continuumio/miniconda3:4.9.1"

configfile: "../config/config.yaml"

SAMPLES = pd.read_table(config['samples'])['Sample'].tolist()
RAW_READ_DIR = config['paths']['raw_reads']
TRIMMED_READ_DIR = config['paths']['trimmed_reads']
TMPDIR = config['paths']['temp_dir']

REFERENCE_GENOME = config['files']['reference_genome']

RAW_READ_FASTQC_DIR = '../results/qc/fastqc_raw_reads'
TRIMMED_READ_FASTQC_DIR = '../results/qc/fastqc_trimmed_reads'

include: "rules/common.smk"
    
rule all:
    input:
        fastqc_target_files(),
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR)],
                sample=SAMPLES, ext=['_fastqc.html', '_fastqc.zip']),
        expand('{trimmed_read_dir}/{sample}/{sample}_{read}.fq.gz', trimmed_read_dir=TRIMMED_READ_DIR, sample=SAMPLES, read=['trimmed_1', 'trimmed_2', 'unpaired']),
        expand('../results/fastp_trim_reports/{sample}_fastp.html', sample=SAMPLES),
        expand('../results/bams/unpaired/{sample}_unpaired_sorted.bam', sample=SAMPLES),
        expand('../results/bams/paired/{sample}_paired_sorted.bam', sample=SAMPLES),
        expand('../results/bams/merged/{sample}_merged_sorted.bam', sample=SAMPLES),
        expand('../results/bams/final/{sample}_merged_sorted_dupsMarked.bam', sample=SAMPLES),
        expand('../results/bams/final/{sample}_merged_sorted_dupsMarked.bai', sample=SAMPLES)

rule fastqc_raw_reads:
    input:
        get_raw_reads()
    output:
        fastqc_target_files()
    conda: "envs/fastqc.yaml"
    log: "logs/fastqc_raw_reads/fastqc_raw_reads.log"
    threads: 12
    shell:
        #"touch {output}"
        "fastqc --threads {{threads}} --outdir {0} --noextract --quiet --dir {1} {{input}} 2> {{log}}".format(RAW_READ_FASTQC_DIR, TMPDIR)

rule fastqc_trimmed_reads:
    input:
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.fq.gz'.format(TRIMMED_READ_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.fq.gz'.format(TRIMMED_READ_DIR)], 
                sample=SAMPLES)
    output:
        expand(['{0}/{{sample}}/{{sample}}_trimmed_1.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR), 
                '{0}/{{sample}}/{{sample}}_trimmed_2.{{ext}}'.format(TRIMMED_READ_FASTQC_DIR)],
                sample=SAMPLES, ext=['_fastqc.html', '_fastqc.zip'])
    conda: "envs/fastqc.yaml"
    log: "logs/fastqc_trimmed_reads/fastqc_trimmed_reads.log"
    threads: 12
    shell:
        #"touch {output}"
        "fastqc --threads {{threads}} --outdir {0} --noextract --quiet --dir {1} {{input}} 2> {{log}}".format(TRIMMED_READ_FASTQC_DIR, TMPDIR)

rule fastp_trim:
    input:
        r1 = lambda wc: str(glob.glob('{0}/{1}/{1}_*_1.fq.gz'.format(RAW_READ_DIR, wc.sample))[0]),
        r2 = lambda wc: str(glob.glob('{0}/{1}/{1}_*_2.fq.gz'.format(RAW_READ_DIR, wc.sample))[0])
    output:
        r1_trim = "{0}/{{sample}}/{{sample}}_trimmed_1.fq.gz".format(TRIMMED_READ_DIR),
        r2_trim = "{0}/{{sample}}/{{sample}}_trimmed_2.fq.gz".format(TRIMMED_READ_DIR),
        unp = "{0}/{{sample}}/{{sample}}_unpaired.fq.gz".format(TRIMMED_READ_DIR),
        html = "../results/fastp_trim_reports/{sample}_fastp.html"
    conda: "envs/fastp.yaml"
    log: "logs/fastp_trim/{sample}_fastp.log"  
    shell:
        #"touch {output}"
        "fastp --in1 {input.r1} \
            --in2 {input.r2} \
            --out1 {output.r1_trim} \
            --out2 {output.r2_trim} \
            --unpaired1 {output.unp} \
            --unpaired2 {output.unp} \
            --html {output.html} \
            --detect_adapter_pe \
            --trim_poly_g \
            --overrepresentation_analysis 2> {log}" 

rule bwa_map_unpaired:
    input:
        unp = rules.fastp_trim.output.unp
    output:
        "../results/bams/unpaired/{sample}_unpaired_sorted.bam"
    params:
        "-R @RG\tID:${sample}\tCN:NOVOGENE\tPL:ILLUMINA\tPM:NOVASEQ.S4\tSM:${sample}"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/bwa_map_unpaired/{sample}_bwa_map.unpaired.log"
    shell:
        #"touch {output}"
        "bwa mem {0} {{input.unp}} {{params}} |\
			 samtools collate -O - {1}/{{wildcards.sample}}_unpaired |\
            samtools view -b > {{output}} 2> {{log}}".format(REFERENCE_GENOME, TMPDIR)

rule bwa_map_paired:
    input:
        r1 = rules.fastp_trim.output.r1_trim,
        r2 = rules.fastp_trim.output.r2_trim
    output:
        "../results/bams/paired/{sample}_paired_sorted.bam"
    params:
        "-R @RG\tID:${sample}\tCN:NOVOGENE\tPL:ILLUMINA\tPM:NOVASEQ.S4\tSM:${sample}"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/bwa_map_paired/{sample}_bwa_map.paired.log"
    shell:
        #"touch {output}"
        "bwa mem {0} {{input.r1}} {{input.r2}} {{params}} |\
			 samtools collate -O - {1}/{{wildcards.sample}}_paired |\
            samtools view -b > {{output}} 2> {{log}}".format(REFERENCE_GENOME, TMPDIR)

rule merge_bams:
    input:
        unp = rules.bwa_map_unpaired.output,
        pair = rules.bwa_map_paired.output
    output:
        "../results/bams/merged/{sample}_merged_sorted.bam"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/merge_bams/{sample}_merge_bams.log"
    shell:
        #"touch {output}"
        """
        samtools merge -c - {{input.pair}} {{input.unp}} | samtools sort -O bam -o {{output}} -T {0}/{{wildcards.sample}}_merged 2> {{log}}
        """.format(TMPDIR)
        

rule samtools_markdup:
    input:
        rules.merge_bams.output
    output:
        bam = "../results/bams/final/{sample}_merged_sorted_dupsMarked.bam",
        stats = "../results/duplication_stats/{sample}_dupStats.txt"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/samtools_markdup/{sample}_samtools_markdup.log"
    shell:
        """
        samtools markdup -T {0} -f {{output.stats}} {{input}} {{output.bam}} 2> {{log}}
        """.format(TMPDIR)

rule index_bam:
    input:
        rules.samtools_markdup.output.bam
    output:
        "../results/bams/final/{sample}_merged_sorted_dupsMarked.bai"
    conda: "envs/bwa_mapping.yaml"
    log: "logs/index_bam/{sample}_index_bam.log"
    shell:
        """
        samtools index {input}
        """

rule clean:
    params:
        "logs ../results {0}/* {1}/*".format(TRIMMED_READ_DIR, TMPDIR)
    shell:
        "rm -rfv {params}"
